@page "/Rent"
@using DataBank
@rendermode InteractiveServer
@inject DBConnectionContext ef
@inject NavigationManager Navigation
@using Pattern

<header class="header">
    <h1 class="logo">GAME<span class="text-purple">RENT</span></h1>
    <nav class="nav">
        <a href="https://localhost:7118/">Главная</a>
        <a href="https://localhost:7118/weather">Каталог</a>
        <button class="btn-active"> <a href="https://localhost:7118/rent">Аренда</a></button>
       
    </nav>
</header>
<EditForm FormName="formAddItem" Model="_users" OnValidSubmit="@Submit">
    <DataAnnotationsValidator></DataAnnotationsValidator>
    <div class="text" > Ваше имя </div>
    <input type="text" class="btn-acti" bind-value="@_users.FirstName"required/>
    <div class="text"> Ваша фамилия </div>
    <input type="text" class="btn-acti" bind-value="@_users.LastName"required/>
    <div class="text"> Электронная почта</div>
    <input type="email" class="btn-acti" bind-value="@_users.Email" required/>
    <div class="text" > Номер телефона </div>
    <input type="text" class="btn-acti" bind-value="@_users.Phone" required />
    <div class="text" > Планируемая дата возврата</div>
    <input type="date" class="btn-acti" bind-value="@_rental.PlannedReturnDate"required/>
    <div class="text"> Выберите игру </div>
    <select class="text" @bind="@_game.GameID" required>
    
        
        @foreach (var item in games)
        {
            <option value="@item.ID" selected="@((item.ID == _game.GameID).ToString().ToLower())">
                @item.Title
            </option>
        }

    </select>
    <div><button type="submit" class="arenda">Арендовать</button></div>
    @if (!string.IsNullOrEmpty(successMessage))
    {
    <div class="success-message" style="margin-top: 20px; padding: 10px; border: 1px solid green; background-color: #8b5cf6;">
        @((MarkupString)successMessage)
    </div>
    }
    
</EditForm>

@foreach (var item in ef.Games
              .OrderBy(x => x.Title)
              .ToList()) ;

@code{

    private string? successMessage;
    private Users _users = new Users();
    private Rental _rental = new Rental();

    private void Submit(EditContext arg)
    {
        
        var selectedGame = games.FirstOrDefault(g => g.ID == _game.GameID);
        ef.Add(_users);
        ef.SaveChanges();

        if (selectedGame != null)
        {
            successMessage = $"Вы успешно забронировали игру \"{selectedGame.Title}\". " +
                             $"Планируемая дата возврата: {_rental.PlannedReturnDate:dd.MM.yyyy}";
        }
        else
        {
            successMessage = "Вы успешно забронировали игру. (название не найдено)";
        }
        _users = new Users();
        _rental = new Rental();
        _game = new Game();
    }
    

    private Game _game = new Game();
    [Parameter]
    [SupplyParameterFromQuery(Name = "gameID")]
    public int? SelectedGameID { get; set; }
    
    private List<Game> games = new();

    protected override void OnInitialized()
    {
        
        games = ef.Games.ToList();

        
        if (SelectedGameID.HasValue)
        {
            _game.GameID = SelectedGameID.Value;
        }
    }
}